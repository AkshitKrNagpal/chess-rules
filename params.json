{"name":"Chess-rules","tagline":"Chess Rules implementation as a standalone JavaScript module.","body":"[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url] [![Coverage Status](https://coveralls.io/repos/ChessCorp/chess-rules/badge.svg?branch=master&service=github)](https://coveralls.io/github/ChessCorp/chess-rules?branch=master)\r\n\r\nChess Rules implementation as a standalone module.\r\n\r\n# Install\r\n\r\n## As a Node module\r\n\r\n\r\n```sh\r\n$ npm install chess-rules\r\n```\r\n\r\nThis will install rules module in the node_modules folder.\r\n\r\n## Using Bower\r\n\r\n```sh\r\n$ bower install chess-rules\r\nbower chess-rules#*             cached git://github.com/ChessCorp/chess-rules.git#0.8.0\r\nbower chess-rules#*           validate 0.8.0 against git://github.com/ChessCorp/chess-rules.git#*\r\nbower chess-rules#*                new version for git://github.com/ChessCorp/chess-rules.git#*\r\nbower chess-rules#*            resolve git://github.com/ChessCorp/chess-rules.git#*\r\nbower chess-rules#*           download https://github.com/ChessCorp/chess-rules/archive/0.10.1.tar.gz\r\nbower chess-rules#*            extract archive.tar.gz\r\nbower chess-rules#*           resolved git://github.com/ChessCorp/chess-rules.git#0.10.1\r\nbower chess-rules#~0.10.1      install chess-rules#0.10.1\r\n\r\nchess-rules#0.10.1 bower_components/chess-rules\r\n```\r\n\r\n# Usage\r\n\r\n## Import the main rules object\r\n\r\n```js\r\n> var chessRules = require('chess-rules');\r\n\r\n> chessRules\r\n{ getInitialPosition: [Function: getInitialPosition],\r\n  positionToString: [Function: positionToString],\r\n  getAvailableMoves: [Function: getAvailableMoves],\r\n  applyMove: [Function: applyMove],\r\n  computeDiffs: [Function: computeDiffs],\r\n  applyDiffs: [Function: applyDiffs],\r\n  pgnToMove: [Function: pgnToMove],\r\n  moveToPgn: [Function: moveToPgn],\r\n  getGameStatus: [Function: getGameStatus] \r\n  }\r\n```\r\n\r\n## Instantiate an initial position model\r\n\r\n```js\r\nvar position = chessRules.getInitialPosition();\r\n```\r\n\r\nThe position model used by the internal engine has the following structure:\r\n\r\n```js\r\n{ turn: 'W',\r\n  castlingFlags: { W: { K: true, Q: true }, B: { K: true, Q: true } },\r\n  lastPawnMoveColumn: null,\r\n  check: false,\r\n  board: \r\n   [ { type: 'R', side: 'W' },\r\n     { type: 'N', side: 'W' },\r\n     { type: 'B', side: 'W' },\r\n     { type: 'Q', side: 'W' },\r\n     { type: 'K', side: 'W' },\r\n     { type: 'B', side: 'W' },\r\n     { type: 'N', side: 'W' },\r\n     { type: 'R', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     { type: 'P', side: 'W' },\r\n     null,\r\n     null,\r\n     null,\r\n     ...\r\n   ]\r\n}\r\n```\r\n\r\nThe position can be logged more conveniently using the provided function positionToString:\r\n\r\n```js\r\n> console.log(chessRules.positionToString(position))\r\nWHITE KQkq\r\n8 r n b q k b n r \r\n7 p p p p p p p p \r\n6 . . . . . . . . \r\n5 . . . . . . . . \r\n4 . . . . . . . . \r\n3 . . . . . . . . \r\n2 P P P P P P P P \r\n1 R N B Q K B N R \r\n  a b c d e f g h  \r\n```\r\n\r\nAn extra parameter can be provided to use extended charsets but may not be supported by all terminals:\r\n\r\n```js\r\n> console.log(chessRules.positionToString(position, true))\r\nWHITE KQkq\r\n8 ♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜ \r\n7 ♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟ \r\n6                 \r\n5                 \r\n4                 \r\n3                 \r\n2 ♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙ \r\n1 ♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖ \r\n  a b c d e f g h \r\n```\r\n\r\n## Get available moves for a given position\r\n\r\nMoves are expressed as a pair of coordinates on the board. The offset value is computed row by row starting at A1.\r\n\r\n```js\r\n> var availableMoves = chessRules.getAvailableMoves(position);\r\nundefined\r\n\r\n> availableMoves\r\n[ { src: 1, dst: 16 },\r\n  { src: 1, dst: 18 },\r\n  { src: 6, dst: 21 },\r\n  { src: 6, dst: 23 },\r\n  { src: 8, dst: 16 },\r\n  { src: 8, dst: 24 },\r\n  { src: 9, dst: 17 },\r\n  { src: 9, dst: 25 },\r\n  { src: 10, dst: 18 },\r\n  { src: 10, dst: 26 },\r\n  { src: 11, dst: 19 },\r\n  { src: 11, dst: 27 },\r\n  { src: 12, dst: 20 },\r\n  { src: 12, dst: 28 },\r\n  { src: 13, dst: 21 },\r\n  { src: 13, dst: 29 },\r\n  { src: 14, dst: 22 },\r\n  { src: 14, dst: 30 },\r\n  { src: 15, dst: 23 },\r\n  { src: 15, dst: 31 } ]\r\n> \r\n```\r\n\r\n## Converting a move from / to PGN movetext notation\r\n\r\nPGN move text is described here [https://en.wikipedia.org/wiki/Portable_Game_Notation](https://en.wikipedia.org/wiki/Portable_Game_Notation)\r\n\r\nConverting move text to move vector:\r\n\r\n```js\r\n> chessRules.pgnToMove(position, 'e4')\r\n{ src: 12, dst: 28 }\r\n\r\n> chessRules.pgnToMove(position, 'Pe2e4')\r\n{ src: 12, dst: 28 }\r\n\r\n> chessRules.pgnToMove(position, 'Nf3')\r\n{ src: 6, dst: 21 }\r\n```\r\n\r\n\r\nConverting move vector to PGN move text:\r\n\r\n```js\r\n> chessRules.moveToPgn(position, { src: 6, dst: 23 });\r\n'Nh3'\r\n```\r\n\r\nNote: the position must always be provided because the way that the moves are shortened requires access to the current piece positions to make these transforms.\r\n\r\n## Update the position by playing moves\r\n\r\nThe **applyMove** will apply a move vector to create a new updated position structure. The original position object remains unchanged.\r\n\r\n```js\r\n> var moveE4 = chessRules.pgnToMove(position,'e4');\r\nundefined\r\n\r\n> var updatedPosition = chessRules.applyMove(position, moveE4);\r\nundefined\r\n\r\n> console.log(chessRules.positionToString(position))\r\nWHITE KQkq\r\n8 r n b q k b n r \r\n7 p p p p p p p p \r\n6 . . . . . . . . \r\n5 . . . . . . . . \r\n4 . . . . . . . . \r\n3 . . . . . . . . \r\n2 P P P P P P P P \r\n1 R N B Q K B N R \r\n  a b c d e f g h \r\nundefined\r\n\r\n> console.log(chessRules.positionToString(updatedPosition))\r\nBLACK KQkq\r\n8 r n b q k b n r \r\n7 p p p p p p p p \r\n6 . . . . . . . . \r\n5 . . . . . . . . \r\n4 . . . . P . . . \r\n3 . . . . . . . . \r\n2 P P P P . P P P \r\n1 R N B Q K B N R \r\n  a b c d e f g h \r\nundefined\r\n> \r\n```\r\n\r\n## Determine game status\r\n\r\nA game status can be either:\r\n* OPEN - The game is still in progress\r\n* PAT - The game has ended as one of the players couldn't move anymore while not being checkmate\r\n* WHITEWON - The white player won\r\n* BLACKWON - The black player won\r\n\r\n```js\r\n> chessRules.getGameStatus(position)\r\n'OPEN'\r\n```\r\n\r\n## License\r\n\r\nMIT © [Yannick Kirschhoffer](http://www.alcibiade.org/)\r\n\r\n\r\n[npm-image]: https://badge.fury.io/js/chess-rules.svg\r\n[npm-url]: https://npmjs.org/package/chess-rules\r\n[travis-image]: https://travis-ci.org/ChessCorp/chess-rules.svg?branch=master\r\n[travis-url]: https://travis-ci.org/ChessCorp/chess-rules\r\n[daviddm-image]: https://david-dm.org/ChessCorp/chess-rules.svg?theme=shields.io\r\n[daviddm-url]: https://david-dm.org/ChessCorp/chess-rules\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}